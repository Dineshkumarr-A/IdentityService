trigger:
- main

pool:
  name: mylinuxagent

variables:
  buildConfiguration: 'Release'
  publishDir: '$(Build.ArtifactStagingDirectory)/publish'

steps:
# Build
- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'dotnet build $(buildConfiguration)'

# Publish the app (creates output suitable for deployment)
- script: dotnet publish --configuration $(buildConfiguration) -o $(publishDir)
  displayName: 'dotnet publish $(buildConfiguration)'

# Zip the published output (so deployment task can pick it up)
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(publishDir)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true

# Publish artifact (optional, so you can use it in release pipeline or download later)
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

# Deploy to Azure Web App (Linux)
- task: AzureRmWebAppDeployment@5
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'Azure subscription 1(2c87b94c-e748-4605-a6fc-dd3ba336fc50)'
    appType: 'webAppLinux'
    WebAppName: 'IdentityService'
    deployToSlotOrASE: true
    ResourceGroupName: 'Azure-poc'
    SlotName: 'production'
    packageForLinux: '$(Build.ArtifactStagingDirectory)/*.zip'
    DeploymentTypeLinux: 'oneDeploy'
